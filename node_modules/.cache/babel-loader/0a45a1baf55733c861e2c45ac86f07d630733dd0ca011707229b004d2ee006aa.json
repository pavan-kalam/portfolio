{"ast":null,"code":"// Script to process markdown files and generate video data\nimport fs from 'fs';\nimport path from 'path';\nimport { parseMarkdownContent, generateVideoScript } from '../utils/videoGenerator.js';\n\n// Project markdown file mappings\nconst PROJECT_MARKDOWN_PATHS = {\n  deepfake: {\n    title: 'Deep Fake Detection Using CNN',\n    files: ['../../../Deepfake_README.md'],\n    outputPath: './src/data/deepfake_video_data.json'\n  },\n  cybersecurity: {\n    title: 'Real-Time Threat Intelligence System',\n    files: ['../../../cybersecurity project docs/README.md', '../../../cybersecurity project docs/system_walkthrough.markdown', '../../../cybersecurity project docs/nist_framework_summary.md', '../../../cybersecurity project docs/tech_stack.md', '../../../cybersecurity project docs/security_audit.md'],\n    outputPath: './src/data/cybersecurity_video_data.json'\n  }\n};\n\n// Read and combine markdown content\nconst readMarkdownFile = filePath => {\n  try {\n    const absolutePath = path.resolve(filePath);\n    if (fs.existsSync(absolutePath)) {\n      return fs.readFileSync(absolutePath, 'utf8');\n    } else {\n      console.warn(`File not found: ${filePath}`);\n      return '';\n    }\n  } catch (error) {\n    console.error(`Error reading file ${filePath}:`, error);\n    return '';\n  }\n};\n\n// Combine multiple markdown files into a single content string\nconst combineMarkdownFiles = filePaths => {\n  let combinedContent = '';\n  filePaths.forEach(filePath => {\n    const content = readMarkdownFile(filePath);\n    if (content) {\n      combinedContent += content + '\\n\\n---\\n\\n';\n    }\n  });\n  return combinedContent;\n};\n\n// Extract enhanced project data for video generation\nconst extractEnhancedProjectData = (markdownContent, projectTitle) => {\n  const basicData = parseMarkdownContent(markdownContent);\n\n  // Enhanced extraction for better video content\n  const enhancedData = {\n    ...basicData,\n    title: projectTitle,\n    keyHighlights: [],\n    businessValue: '',\n    technicalAchievements: [],\n    visualElements: []\n  };\n\n  // Extract specific highlights based on project type\n  if (projectTitle.toLowerCase().includes('deepfake')) {\n    enhancedData.keyHighlights = ['CNN-based deep learning model', 'Real vs Fake image classification', 'TensorFlow and Keras implementation', 'Google Colab training optimization'];\n    enhancedData.businessValue = 'Enhances digital content authenticity and combats misinformation';\n    enhancedData.technicalAchievements = ['Implemented convolutional neural networks', 'Optimized for limited computational resources', 'Web interface for real-time predictions'];\n    enhancedData.visualElements = ['Neural network architecture diagrams', 'Training accuracy graphs', 'Before/after detection examples'];\n  } else if (projectTitle.toLowerCase().includes('threat intelligence')) {\n    enhancedData.keyHighlights = ['Real-time OSINT threat monitoring', 'NIST CSF 2.0 compliance', 'AI-powered risk assessment', 'Automated defense mechanisms'];\n    enhancedData.businessValue = 'Protects organizations from cyber threats with proactive intelligence';\n    enhancedData.technicalAchievements = ['Integrated multiple OSINT tools', 'Implemented blue team defense strategies', 'Real-time dashboard with risk scoring', 'Automated incident response'];\n    enhancedData.visualElements = ['Security dashboard screenshots', 'Threat intelligence workflows', 'NIST framework alignment charts'];\n  }\n  return enhancedData;\n};\n\n// Generate comprehensive video script with enhanced storytelling\nconst generateEnhancedVideoScript = (projectData, duration = 30) => {\n  const {\n    title,\n    keyHighlights,\n    businessValue,\n    technicalAchievements,\n    visualElements\n  } = projectData;\n  const script = {\n    scenes: [],\n    totalDuration: duration,\n    style: 'professional-tech',\n    metadata: {\n      title: title,\n      highlights: keyHighlights,\n      businessValue: businessValue\n    }\n  };\n\n  // Scene 1: Title and Hook (6 seconds)\n  script.scenes.push({\n    duration: 6,\n    type: 'title_intro',\n    content: {\n      title: title,\n      subtitle: businessValue,\n      animation: 'dramatic_zoom_in'\n    },\n    voiceover: `${title}: ${businessValue}`,\n    visualElements: ['Animated logo', 'Gradient background']\n  });\n\n  // Scene 2: Problem/Challenge (8 seconds)\n  let problemStatement = '';\n  if (title.toLowerCase().includes('deepfake')) {\n    problemStatement = 'In an era of AI-generated content, distinguishing real from fake images is crucial for digital authenticity.';\n  } else if (title.toLowerCase().includes('threat')) {\n    problemStatement = 'Cyber threats evolve rapidly, requiring real-time intelligence and automated defense mechanisms.';\n  }\n  script.scenes.push({\n    duration: 8,\n    type: 'problem_statement',\n    content: {\n      problem: problemStatement,\n      animation: 'concern_to_solution'\n    },\n    voiceover: problemStatement,\n    visualElements: ['Problem illustration', 'Statistical overlays']\n  });\n\n  // Scene 3: Solution Showcase (12 seconds)\n  script.scenes.push({\n    duration: 12,\n    type: 'solution_showcase',\n    content: {\n      highlights: keyHighlights,\n      achievements: technicalAchievements.slice(0, 3),\n      animation: 'feature_cascade'\n    },\n    voiceover: `Our solution delivers: ${keyHighlights.slice(0, 3).join(', ')}.`,\n    visualElements: visualElements\n  });\n\n  // Scene 4: Call to Action (4 seconds)\n  script.scenes.push({\n    duration: 4,\n    type: 'call_to_action',\n    content: {\n      message: 'Explore the technical implementation',\n      animation: 'pulse_highlight'\n    },\n    voiceover: 'Dive deeper into the technical details and see it in action.',\n    visualElements: ['Action button', 'Pointer animation']\n  });\n  return script;\n};\n\n// Main processing function\nconst processAllProjects = async () => {\n  console.log('🎬 Starting video data generation for projects...\\n');\n  const videoData = {};\n  for (const [projectKey, config] of Object.entries(PROJECT_MARKDOWN_PATHS)) {\n    console.log(`📝 Processing ${config.title}...`);\n    try {\n      // Combine all markdown files for the project\n      const combinedContent = combineMarkdownFiles(config.files);\n      if (!combinedContent.trim()) {\n        console.warn(`⚠️  No content found for ${projectKey}`);\n        continue;\n      }\n\n      // Extract enhanced project data\n      const projectData = extractEnhancedProjectData(combinedContent, config.title);\n\n      // Generate enhanced video script\n      const videoScript = generateEnhancedVideoScript(projectData, 30);\n\n      // Create comprehensive video data\n      videoData[projectKey] = {\n        projectId: projectKey,\n        title: config.title,\n        script: videoScript,\n        projectData: projectData,\n        generatedAt: new Date().toISOString(),\n        status: 'script_ready',\n        videoSrc: null,\n        // Will be populated after video generation\n        posterImage: `/project_images/${projectKey}_poster.jpg`\n      };\n\n      // Save individual project data\n      const outputDir = path.dirname(config.outputPath);\n      if (!fs.existsSync(outputDir)) {\n        fs.mkdirSync(outputDir, {\n          recursive: true\n        });\n      }\n      fs.writeFileSync(config.outputPath, JSON.stringify(videoData[projectKey], null, 2), 'utf8');\n      console.log(`✅ Generated video script for ${config.title}`);\n      console.log(`   📄 Script scenes: ${videoScript.scenes.length}`);\n      console.log(`   🎯 Key highlights: ${projectData.keyHighlights.length}`);\n      console.log(`   💾 Saved to: ${config.outputPath}\\n`);\n    } catch (error) {\n      console.error(`❌ Error processing ${projectKey}:`, error);\n      videoData[projectKey] = {\n        projectId: projectKey,\n        title: config.title,\n        error: error.message,\n        status: 'failed',\n        generatedAt: new Date().toISOString()\n      };\n    }\n  }\n\n  // Save combined video data\n  const combinedOutputPath = './src/data/all_video_data.json';\n  fs.writeFileSync(combinedOutputPath, JSON.stringify(videoData, null, 2), 'utf8');\n  console.log(`🎉 Video data generation complete!`);\n  console.log(`📁 Combined data saved to: ${combinedOutputPath}`);\n  console.log(`\\n📊 Summary:`);\n  console.log(`   ✅ Successful: ${Object.values(videoData).filter(d => d.status === 'script_ready').length}`);\n  console.log(`   ❌ Failed: ${Object.values(videoData).filter(d => d.status === 'failed').length}`);\n  return videoData;\n};\n\n// Export functions for use in other modules\nexport { readMarkdownFile, combineMarkdownFiles, extractEnhancedProjectData, generateEnhancedVideoScript, processAllProjects, PROJECT_MARKDOWN_PATHS };\n\n// Run if called directly\nif (import.meta.url === `file://${process.argv[1]}`) {\n  processAllProjects().catch(console.error);\n}","map":{"version":3,"names":["fs","path","parseMarkdownContent","generateVideoScript","PROJECT_MARKDOWN_PATHS","deepfake","title","files","outputPath","cybersecurity","readMarkdownFile","filePath","absolutePath","resolve","existsSync","readFileSync","console","warn","error","combineMarkdownFiles","filePaths","combinedContent","forEach","content","extractEnhancedProjectData","markdownContent","projectTitle","basicData","enhancedData","keyHighlights","businessValue","technicalAchievements","visualElements","toLowerCase","includes","generateEnhancedVideoScript","projectData","duration","script","scenes","totalDuration","style","metadata","highlights","push","type","subtitle","animation","voiceover","problemStatement","problem","achievements","slice","join","message","processAllProjects","log","videoData","projectKey","config","Object","entries","trim","videoScript","projectId","generatedAt","Date","toISOString","status","videoSrc","posterImage","outputDir","dirname","mkdirSync","recursive","writeFileSync","JSON","stringify","length","combinedOutputPath","values","filter","d","import","meta","url","process","argv","catch"],"sources":["/Users/pavankalam/Desktop/gemini_cli_portfolio/portfolio-website/src/scripts/processMarkdownForVideos.js"],"sourcesContent":["// Script to process markdown files and generate video data\nimport fs from 'fs';\nimport path from 'path';\nimport { parseMarkdownContent, generateVideoScript } from '../utils/videoGenerator.js';\n\n// Project markdown file mappings\nconst PROJECT_MARKDOWN_PATHS = {\n  deepfake: {\n    title: 'Deep Fake Detection Using CNN',\n    files: ['../../../Deepfake_README.md'],\n    outputPath: './src/data/deepfake_video_data.json'\n  },\n  cybersecurity: {\n    title: 'Real-Time Threat Intelligence System',\n    files: [\n      '../../../cybersecurity project docs/README.md',\n      '../../../cybersecurity project docs/system_walkthrough.markdown',\n      '../../../cybersecurity project docs/nist_framework_summary.md',\n      '../../../cybersecurity project docs/tech_stack.md',\n      '../../../cybersecurity project docs/security_audit.md'\n    ],\n    outputPath: './src/data/cybersecurity_video_data.json'\n  }\n};\n\n// Read and combine markdown content\nconst readMarkdownFile = (filePath) => {\n  try {\n    const absolutePath = path.resolve(filePath);\n    if (fs.existsSync(absolutePath)) {\n      return fs.readFileSync(absolutePath, 'utf8');\n    } else {\n      console.warn(`File not found: ${filePath}`);\n      return '';\n    }\n  } catch (error) {\n    console.error(`Error reading file ${filePath}:`, error);\n    return '';\n  }\n};\n\n// Combine multiple markdown files into a single content string\nconst combineMarkdownFiles = (filePaths) => {\n  let combinedContent = '';\n  \n  filePaths.forEach(filePath => {\n    const content = readMarkdownFile(filePath);\n    if (content) {\n      combinedContent += content + '\\n\\n---\\n\\n';\n    }\n  });\n  \n  return combinedContent;\n};\n\n// Extract enhanced project data for video generation\nconst extractEnhancedProjectData = (markdownContent, projectTitle) => {\n  const basicData = parseMarkdownContent(markdownContent);\n  \n  // Enhanced extraction for better video content\n  const enhancedData = {\n    ...basicData,\n    title: projectTitle,\n    keyHighlights: [],\n    businessValue: '',\n    technicalAchievements: [],\n    visualElements: []\n  };\n\n  // Extract specific highlights based on project type\n  if (projectTitle.toLowerCase().includes('deepfake')) {\n    enhancedData.keyHighlights = [\n      'CNN-based deep learning model',\n      'Real vs Fake image classification',\n      'TensorFlow and Keras implementation',\n      'Google Colab training optimization'\n    ];\n    enhancedData.businessValue = 'Enhances digital content authenticity and combats misinformation';\n    enhancedData.technicalAchievements = [\n      'Implemented convolutional neural networks',\n      'Optimized for limited computational resources',\n      'Web interface for real-time predictions'\n    ];\n    enhancedData.visualElements = [\n      'Neural network architecture diagrams',\n      'Training accuracy graphs',\n      'Before/after detection examples'\n    ];\n  } else if (projectTitle.toLowerCase().includes('threat intelligence')) {\n    enhancedData.keyHighlights = [\n      'Real-time OSINT threat monitoring',\n      'NIST CSF 2.0 compliance',\n      'AI-powered risk assessment',\n      'Automated defense mechanisms'\n    ];\n    enhancedData.businessValue = 'Protects organizations from cyber threats with proactive intelligence';\n    enhancedData.technicalAchievements = [\n      'Integrated multiple OSINT tools',\n      'Implemented blue team defense strategies',\n      'Real-time dashboard with risk scoring',\n      'Automated incident response'\n    ];\n    enhancedData.visualElements = [\n      'Security dashboard screenshots',\n      'Threat intelligence workflows',\n      'NIST framework alignment charts'\n    ];\n  }\n\n  return enhancedData;\n};\n\n// Generate comprehensive video script with enhanced storytelling\nconst generateEnhancedVideoScript = (projectData, duration = 30) => {\n  const { title, keyHighlights, businessValue, technicalAchievements, visualElements } = projectData;\n  \n  const script = {\n    scenes: [],\n    totalDuration: duration,\n    style: 'professional-tech',\n    metadata: {\n      title: title,\n      highlights: keyHighlights,\n      businessValue: businessValue\n    }\n  };\n\n  // Scene 1: Title and Hook (6 seconds)\n  script.scenes.push({\n    duration: 6,\n    type: 'title_intro',\n    content: {\n      title: title,\n      subtitle: businessValue,\n      animation: 'dramatic_zoom_in'\n    },\n    voiceover: `${title}: ${businessValue}`,\n    visualElements: ['Animated logo', 'Gradient background']\n  });\n\n  // Scene 2: Problem/Challenge (8 seconds)\n  let problemStatement = '';\n  if (title.toLowerCase().includes('deepfake')) {\n    problemStatement = 'In an era of AI-generated content, distinguishing real from fake images is crucial for digital authenticity.';\n  } else if (title.toLowerCase().includes('threat')) {\n    problemStatement = 'Cyber threats evolve rapidly, requiring real-time intelligence and automated defense mechanisms.';\n  }\n  \n  script.scenes.push({\n    duration: 8,\n    type: 'problem_statement',\n    content: {\n      problem: problemStatement,\n      animation: 'concern_to_solution'\n    },\n    voiceover: problemStatement,\n    visualElements: ['Problem illustration', 'Statistical overlays']\n  });\n\n  // Scene 3: Solution Showcase (12 seconds)\n  script.scenes.push({\n    duration: 12,\n    type: 'solution_showcase',\n    content: {\n      highlights: keyHighlights,\n      achievements: technicalAchievements.slice(0, 3),\n      animation: 'feature_cascade'\n    },\n    voiceover: `Our solution delivers: ${keyHighlights.slice(0, 3).join(', ')}.`,\n    visualElements: visualElements\n  });\n\n  // Scene 4: Call to Action (4 seconds)\n  script.scenes.push({\n    duration: 4,\n    type: 'call_to_action',\n    content: {\n      message: 'Explore the technical implementation',\n      animation: 'pulse_highlight'\n    },\n    voiceover: 'Dive deeper into the technical details and see it in action.',\n    visualElements: ['Action button', 'Pointer animation']\n  });\n\n  return script;\n};\n\n// Main processing function\nconst processAllProjects = async () => {\n  console.log('🎬 Starting video data generation for projects...\\n');\n  \n  const videoData = {};\n  \n  for (const [projectKey, config] of Object.entries(PROJECT_MARKDOWN_PATHS)) {\n    console.log(`📝 Processing ${config.title}...`);\n    \n    try {\n      // Combine all markdown files for the project\n      const combinedContent = combineMarkdownFiles(config.files);\n      \n      if (!combinedContent.trim()) {\n        console.warn(`⚠️  No content found for ${projectKey}`);\n        continue;\n      }\n      \n      // Extract enhanced project data\n      const projectData = extractEnhancedProjectData(combinedContent, config.title);\n      \n      // Generate enhanced video script\n      const videoScript = generateEnhancedVideoScript(projectData, 30);\n      \n      // Create comprehensive video data\n      videoData[projectKey] = {\n        projectId: projectKey,\n        title: config.title,\n        script: videoScript,\n        projectData: projectData,\n        generatedAt: new Date().toISOString(),\n        status: 'script_ready',\n        videoSrc: null, // Will be populated after video generation\n        posterImage: `/project_images/${projectKey}_poster.jpg`\n      };\n      \n      // Save individual project data\n      const outputDir = path.dirname(config.outputPath);\n      if (!fs.existsSync(outputDir)) {\n        fs.mkdirSync(outputDir, { recursive: true });\n      }\n      \n      fs.writeFileSync(\n        config.outputPath, \n        JSON.stringify(videoData[projectKey], null, 2),\n        'utf8'\n      );\n      \n      console.log(`✅ Generated video script for ${config.title}`);\n      console.log(`   📄 Script scenes: ${videoScript.scenes.length}`);\n      console.log(`   🎯 Key highlights: ${projectData.keyHighlights.length}`);\n      console.log(`   💾 Saved to: ${config.outputPath}\\n`);\n      \n    } catch (error) {\n      console.error(`❌ Error processing ${projectKey}:`, error);\n      videoData[projectKey] = {\n        projectId: projectKey,\n        title: config.title,\n        error: error.message,\n        status: 'failed',\n        generatedAt: new Date().toISOString()\n      };\n    }\n  }\n  \n  // Save combined video data\n  const combinedOutputPath = './src/data/all_video_data.json';\n  fs.writeFileSync(\n    combinedOutputPath,\n    JSON.stringify(videoData, null, 2),\n    'utf8'\n  );\n  \n  console.log(`🎉 Video data generation complete!`);\n  console.log(`📁 Combined data saved to: ${combinedOutputPath}`);\n  console.log(`\\n📊 Summary:`);\n  console.log(`   ✅ Successful: ${Object.values(videoData).filter(d => d.status === 'script_ready').length}`);\n  console.log(`   ❌ Failed: ${Object.values(videoData).filter(d => d.status === 'failed').length}`);\n  \n  return videoData;\n};\n\n// Export functions for use in other modules\nexport {\n  readMarkdownFile,\n  combineMarkdownFiles,\n  extractEnhancedProjectData,\n  generateEnhancedVideoScript,\n  processAllProjects,\n  PROJECT_MARKDOWN_PATHS\n};\n\n// Run if called directly\nif (import.meta.url === `file://${process.argv[1]}`) {\n  processAllProjects().catch(console.error);\n} "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}