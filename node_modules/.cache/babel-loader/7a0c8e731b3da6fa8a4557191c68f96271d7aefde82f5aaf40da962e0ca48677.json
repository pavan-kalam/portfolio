{"ast":null,"code":"// Video Generation Utility for Portfolio Projects\nimport fs from 'fs';\nimport path from 'path';\n\n// Function to extract key information from markdown content\nexport const parseMarkdownContent = markdownContent => {\n  const lines = markdownContent.split('\\n');\n  const sections = {\n    title: '',\n    overview: '',\n    keyFeatures: [],\n    techStack: [],\n    implementation: '',\n    results: ''\n  };\n  let currentSection = '';\n  let content = '';\n  for (let line of lines) {\n    if (line.startsWith('# ')) {\n      sections.title = line.replace('# ', '').trim();\n    } else if (line.startsWith('## ')) {\n      if (currentSection && content) {\n        processSectionContent(sections, currentSection, content);\n      }\n      currentSection = line.replace('## ', '').toLowerCase().trim();\n      content = '';\n    } else if (line.trim()) {\n      content += line + '\\n';\n    }\n  }\n\n  // Process the last section\n  if (currentSection && content) {\n    processSectionContent(sections, currentSection, content);\n  }\n  return sections;\n};\nconst processSectionContent = (sections, sectionName, content) => {\n  if (sectionName.includes('overview') || sectionName.includes('description')) {\n    sections.overview = content.trim();\n  } else if (sectionName.includes('feature') || sectionName.includes('key')) {\n    sections.keyFeatures = extractListItems(content);\n  } else if (sectionName.includes('tech') || sectionName.includes('stack')) {\n    sections.techStack = extractListItems(content);\n  } else if (sectionName.includes('implementation') || sectionName.includes('usage')) {\n    sections.implementation = content.trim();\n  } else if (sectionName.includes('result') || sectionName.includes('conclusion')) {\n    sections.results = content.trim();\n  }\n};\nconst extractListItems = content => {\n  return content.split('\\n').filter(line => line.trim().startsWith('-') || line.trim().startsWith('*') || line.trim().startsWith('1.')).map(line => line.replace(/^[-*\\d.]\\s*/, '').trim()).filter(item => item.length > 0);\n};\n\n// Generate video script based on parsed content\nexport const generateVideoScript = (projectData, duration = 30) => {\n  const {\n    title,\n    overview,\n    keyFeatures,\n    techStack,\n    implementation\n  } = projectData;\n  const script = {\n    scenes: [],\n    totalDuration: duration,\n    style: 'professional-tech'\n  };\n\n  // Scene 1: Title and Overview (8 seconds)\n  script.scenes.push({\n    duration: 8,\n    type: 'title_intro',\n    content: {\n      title: title,\n      subtitle: overview.split('.')[0] + '.',\n      animation: 'fade_in_scale'\n    },\n    voiceover: `Introducing ${title}. ${overview.split('.')[0]}.`\n  });\n\n  // Scene 2: Key Features (12 seconds)\n  if (keyFeatures.length > 0) {\n    script.scenes.push({\n      duration: 12,\n      type: 'features_showcase',\n      content: {\n        features: keyFeatures.slice(0, 3),\n        // Limit to 3 features for time\n        animation: 'slide_up_sequential'\n      },\n      voiceover: `Key features include: ${keyFeatures.slice(0, 3).join(', ')}.`\n    });\n  }\n\n  // Scene 3: Technology Stack (6 seconds)\n  if (techStack.length > 0) {\n    script.scenes.push({\n      duration: 6,\n      type: 'tech_stack',\n      content: {\n        technologies: techStack.slice(0, 4),\n        animation: 'tech_icons_appear'\n      },\n      voiceover: `Built with cutting-edge technologies including ${techStack.slice(0, 2).join(' and ')}.`\n    });\n  }\n\n  // Scene 4: Call to Action (4 seconds)\n  script.scenes.push({\n    duration: 4,\n    type: 'call_to_action',\n    content: {\n      message: 'Explore the project details',\n      animation: 'pulse_glow'\n    },\n    voiceover: 'Explore the full project details and implementation.'\n  });\n  return script;\n};\n\n// AI Video Generation Integration\nexport class AIVideoGenerator {\n  constructor(apiKey, service = 'runwayml') {\n    this.apiKey = apiKey;\n    this.service = service;\n    this.baseUrl = this.getServiceUrl(service);\n  }\n  getServiceUrl(service) {\n    const urls = {\n      'runwayml': 'https://api.runwayml.com/v1',\n      'pika': 'https://api.pika.art/v1',\n      'stable_video': 'https://api.stability.ai/v1'\n    };\n    return urls[service] || urls['runwayml'];\n  }\n  async generateVideo(script, options = {}) {\n    const payload = {\n      script: script,\n      style: options.style || 'professional',\n      resolution: options.resolution || '1280x720',\n      fps: options.fps || 30,\n      duration: script.totalDuration,\n      ...options\n    };\n    try {\n      const response = await fetch(`${this.baseUrl}/generate-video`, {\n        method: 'POST',\n        headers: {\n          'Authorization': `Bearer ${this.apiKey}`,\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(payload)\n      });\n      if (!response.ok) {\n        throw new Error(`Video generation failed: ${response.statusText}`);\n      }\n      const result = await response.json();\n      return result;\n    } catch (error) {\n      console.error('Video generation error:', error);\n      throw error;\n    }\n  }\n  async checkStatus(jobId) {\n    try {\n      const response = await fetch(`${this.baseUrl}/jobs/${jobId}`, {\n        headers: {\n          'Authorization': `Bearer ${this.apiKey}`\n        }\n      });\n      if (!response.ok) {\n        throw new Error(`Status check failed: ${response.statusText}`);\n      }\n      return await response.json();\n    } catch (error) {\n      console.error('Status check error:', error);\n      throw error;\n    }\n  }\n}\n\n// Project-specific video configurations\nexport const PROJECT_VIDEO_CONFIGS = {\n  deepfake: {\n    title: 'Deep Fake Detection Using CNN',\n    markdownPath: '../../../Deepfake_README.md',\n    style: 'tech-ai',\n    emphasis: ['CNN', 'TensorFlow', 'Keras', 'Deep Learning'],\n    duration: 30\n  },\n  cybersecurity: {\n    title: 'Real-Time Threat Intelligence System',\n    markdownPath: '../../../cybersecurity project docs',\n    style: 'security-professional',\n    emphasis: ['OSINT', 'NIST Framework', 'Real-time Monitoring', 'AI Risk Assessment'],\n    duration: 35\n  },\n  blockchain: {\n    title: 'Blockchain-Based Real Estate Management',\n    style: 'fintech-modern',\n    emphasis: ['Blockchain', 'Ethereum', 'Smart Contracts', 'Real Estate'],\n    duration: 25\n  },\n  ai_agent: {\n    title: 'AI Call Agent With RAG Strategy',\n    style: 'ai-conversational',\n    emphasis: ['RAG', 'AI Agent', 'Natural Language Processing', 'Automation'],\n    duration: 30\n  }\n};\n\n// Main function to process all projects and generate videos\nexport const processProjectVideos = async (apiKey, service = 'runwayml') => {\n  const generator = new AIVideoGenerator(apiKey, service);\n  const results = {};\n  for (const [projectKey, config] of Object.entries(PROJECT_VIDEO_CONFIGS)) {\n    try {\n      console.log(`Processing video for ${config.title}...`);\n\n      // For projects with markdown files\n      if (config.markdownPath) {\n        const content = await loadMarkdownContent(config.markdownPath);\n        const parsedData = parseMarkdownContent(content);\n        const script = generateVideoScript(parsedData, config.duration);\n        const videoJob = await generator.generateVideo(script, {\n          style: config.style,\n          emphasis: config.emphasis\n        });\n        results[projectKey] = {\n          jobId: videoJob.id,\n          status: 'processing',\n          script: script,\n          config: config\n        };\n      }\n    } catch (error) {\n      console.error(`Failed to process ${projectKey}:`, error);\n      results[projectKey] = {\n        error: error.message,\n        status: 'failed'\n      };\n    }\n  }\n  return results;\n};\nconst loadMarkdownContent = async filePath => {\n  // This would need to be adapted based on how you load the markdown files\n  // For now, returning a placeholder\n  return \"# Project Title\\n\\n## Overview\\nProject description...\";\n};\nexport default {\n  parseMarkdownContent,\n  generateVideoScript,\n  AIVideoGenerator,\n  PROJECT_VIDEO_CONFIGS,\n  processProjectVideos\n};","map":{"version":3,"names":["fs","path","parseMarkdownContent","markdownContent","lines","split","sections","title","overview","keyFeatures","techStack","implementation","results","currentSection","content","line","startsWith","replace","trim","processSectionContent","toLowerCase","sectionName","includes","extractListItems","filter","map","item","length","generateVideoScript","projectData","duration","script","scenes","totalDuration","style","push","type","subtitle","animation","voiceover","features","slice","join","technologies","message","AIVideoGenerator","constructor","apiKey","service","baseUrl","getServiceUrl","urls","generateVideo","options","payload","resolution","fps","response","fetch","method","headers","body","JSON","stringify","ok","Error","statusText","result","json","error","console","checkStatus","jobId","PROJECT_VIDEO_CONFIGS","deepfake","markdownPath","emphasis","cybersecurity","blockchain","ai_agent","processProjectVideos","generator","projectKey","config","Object","entries","log","loadMarkdownContent","parsedData","videoJob","id","status","filePath"],"sources":["/Users/pavankalam/Desktop/gemini_cli_portfolio/portfolio-website/src/utils/videoGenerator.js"],"sourcesContent":["// Video Generation Utility for Portfolio Projects\nimport fs from 'fs';\nimport path from 'path';\n\n// Function to extract key information from markdown content\nexport const parseMarkdownContent = (markdownContent) => {\n  const lines = markdownContent.split('\\n');\n  const sections = {\n    title: '',\n    overview: '',\n    keyFeatures: [],\n    techStack: [],\n    implementation: '',\n    results: ''\n  };\n\n  let currentSection = '';\n  let content = '';\n\n  for (let line of lines) {\n    if (line.startsWith('# ')) {\n      sections.title = line.replace('# ', '').trim();\n    } else if (line.startsWith('## ')) {\n      if (currentSection && content) {\n        processSectionContent(sections, currentSection, content);\n      }\n      currentSection = line.replace('## ', '').toLowerCase().trim();\n      content = '';\n    } else if (line.trim()) {\n      content += line + '\\n';\n    }\n  }\n\n  // Process the last section\n  if (currentSection && content) {\n    processSectionContent(sections, currentSection, content);\n  }\n\n  return sections;\n};\n\nconst processSectionContent = (sections, sectionName, content) => {\n  if (sectionName.includes('overview') || sectionName.includes('description')) {\n    sections.overview = content.trim();\n  } else if (sectionName.includes('feature') || sectionName.includes('key')) {\n    sections.keyFeatures = extractListItems(content);\n  } else if (sectionName.includes('tech') || sectionName.includes('stack')) {\n    sections.techStack = extractListItems(content);\n  } else if (sectionName.includes('implementation') || sectionName.includes('usage')) {\n    sections.implementation = content.trim();\n  } else if (sectionName.includes('result') || sectionName.includes('conclusion')) {\n    sections.results = content.trim();\n  }\n};\n\nconst extractListItems = (content) => {\n  return content\n    .split('\\n')\n    .filter(line => line.trim().startsWith('-') || line.trim().startsWith('*') || line.trim().startsWith('1.'))\n    .map(line => line.replace(/^[-*\\d.]\\s*/, '').trim())\n    .filter(item => item.length > 0);\n};\n\n// Generate video script based on parsed content\nexport const generateVideoScript = (projectData, duration = 30) => {\n  const { title, overview, keyFeatures, techStack, implementation } = projectData;\n  \n  const script = {\n    scenes: [],\n    totalDuration: duration,\n    style: 'professional-tech'\n  };\n\n  // Scene 1: Title and Overview (8 seconds)\n  script.scenes.push({\n    duration: 8,\n    type: 'title_intro',\n    content: {\n      title: title,\n      subtitle: overview.split('.')[0] + '.',\n      animation: 'fade_in_scale'\n    },\n    voiceover: `Introducing ${title}. ${overview.split('.')[0]}.`\n  });\n\n  // Scene 2: Key Features (12 seconds)\n  if (keyFeatures.length > 0) {\n    script.scenes.push({\n      duration: 12,\n      type: 'features_showcase',\n      content: {\n        features: keyFeatures.slice(0, 3), // Limit to 3 features for time\n        animation: 'slide_up_sequential'\n      },\n      voiceover: `Key features include: ${keyFeatures.slice(0, 3).join(', ')}.`\n    });\n  }\n\n  // Scene 3: Technology Stack (6 seconds)\n  if (techStack.length > 0) {\n    script.scenes.push({\n      duration: 6,\n      type: 'tech_stack',\n      content: {\n        technologies: techStack.slice(0, 4),\n        animation: 'tech_icons_appear'\n      },\n      voiceover: `Built with cutting-edge technologies including ${techStack.slice(0, 2).join(' and ')}.`\n    });\n  }\n\n  // Scene 4: Call to Action (4 seconds)\n  script.scenes.push({\n    duration: 4,\n    type: 'call_to_action',\n    content: {\n      message: 'Explore the project details',\n      animation: 'pulse_glow'\n    },\n    voiceover: 'Explore the full project details and implementation.'\n  });\n\n  return script;\n};\n\n// AI Video Generation Integration\nexport class AIVideoGenerator {\n  constructor(apiKey, service = 'runwayml') {\n    this.apiKey = apiKey;\n    this.service = service;\n    this.baseUrl = this.getServiceUrl(service);\n  }\n\n  getServiceUrl(service) {\n    const urls = {\n      'runwayml': 'https://api.runwayml.com/v1',\n      'pika': 'https://api.pika.art/v1',\n      'stable_video': 'https://api.stability.ai/v1'\n    };\n    return urls[service] || urls['runwayml'];\n  }\n\n  async generateVideo(script, options = {}) {\n    const payload = {\n      script: script,\n      style: options.style || 'professional',\n      resolution: options.resolution || '1280x720',\n      fps: options.fps || 30,\n      duration: script.totalDuration,\n      ...options\n    };\n\n    try {\n      const response = await fetch(`${this.baseUrl}/generate-video`, {\n        method: 'POST',\n        headers: {\n          'Authorization': `Bearer ${this.apiKey}`,\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(payload)\n      });\n\n      if (!response.ok) {\n        throw new Error(`Video generation failed: ${response.statusText}`);\n      }\n\n      const result = await response.json();\n      return result;\n    } catch (error) {\n      console.error('Video generation error:', error);\n      throw error;\n    }\n  }\n\n  async checkStatus(jobId) {\n    try {\n      const response = await fetch(`${this.baseUrl}/jobs/${jobId}`, {\n        headers: {\n          'Authorization': `Bearer ${this.apiKey}`\n        }\n      });\n\n      if (!response.ok) {\n        throw new Error(`Status check failed: ${response.statusText}`);\n      }\n\n      return await response.json();\n    } catch (error) {\n      console.error('Status check error:', error);\n      throw error;\n    }\n  }\n}\n\n// Project-specific video configurations\nexport const PROJECT_VIDEO_CONFIGS = {\n  deepfake: {\n    title: 'Deep Fake Detection Using CNN',\n    markdownPath: '../../../Deepfake_README.md',\n    style: 'tech-ai',\n    emphasis: ['CNN', 'TensorFlow', 'Keras', 'Deep Learning'],\n    duration: 30\n  },\n  cybersecurity: {\n    title: 'Real-Time Threat Intelligence System',\n    markdownPath: '../../../cybersecurity project docs',\n    style: 'security-professional',\n    emphasis: ['OSINT', 'NIST Framework', 'Real-time Monitoring', 'AI Risk Assessment'],\n    duration: 35\n  },\n  blockchain: {\n    title: 'Blockchain-Based Real Estate Management',\n    style: 'fintech-modern',\n    emphasis: ['Blockchain', 'Ethereum', 'Smart Contracts', 'Real Estate'],\n    duration: 25\n  },\n  ai_agent: {\n    title: 'AI Call Agent With RAG Strategy',\n    style: 'ai-conversational',\n    emphasis: ['RAG', 'AI Agent', 'Natural Language Processing', 'Automation'],\n    duration: 30\n  }\n};\n\n// Main function to process all projects and generate videos\nexport const processProjectVideos = async (apiKey, service = 'runwayml') => {\n  const generator = new AIVideoGenerator(apiKey, service);\n  const results = {};\n\n  for (const [projectKey, config] of Object.entries(PROJECT_VIDEO_CONFIGS)) {\n    try {\n      console.log(`Processing video for ${config.title}...`);\n      \n      // For projects with markdown files\n      if (config.markdownPath) {\n        const content = await loadMarkdownContent(config.markdownPath);\n        const parsedData = parseMarkdownContent(content);\n        const script = generateVideoScript(parsedData, config.duration);\n        \n        const videoJob = await generator.generateVideo(script, {\n          style: config.style,\n          emphasis: config.emphasis\n        });\n        \n        results[projectKey] = {\n          jobId: videoJob.id,\n          status: 'processing',\n          script: script,\n          config: config\n        };\n      }\n    } catch (error) {\n      console.error(`Failed to process ${projectKey}:`, error);\n      results[projectKey] = {\n        error: error.message,\n        status: 'failed'\n      };\n    }\n  }\n\n  return results;\n};\n\nconst loadMarkdownContent = async (filePath) => {\n  // This would need to be adapted based on how you load the markdown files\n  // For now, returning a placeholder\n  return \"# Project Title\\n\\n## Overview\\nProject description...\";\n};\n\nexport default {\n  parseMarkdownContent,\n  generateVideoScript,\n  AIVideoGenerator,\n  PROJECT_VIDEO_CONFIGS,\n  processProjectVideos\n}; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}