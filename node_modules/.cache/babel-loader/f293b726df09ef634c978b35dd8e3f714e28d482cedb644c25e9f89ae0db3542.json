{"ast":null,"code":"import React,{useState,useEffect}from'react';import{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";function MarkdownViewer(_ref){let{file,onClose}=_ref;const[content,setContent]=useState('');const[loading,setLoading]=useState(true);const[error,setError]=useState(null);useEffect(()=>{if(file){fetchMarkdownContent(file.path);}},[file]);const fetchMarkdownContent=async filePath=>{try{setLoading(true);setError(null);const response=await fetch(filePath);if(!response.ok){throw new Error(\"Failed to fetch \".concat(filePath));}const text=await response.text();setContent(text);}catch(err){setError(err.message);}finally{setLoading(false);}};const renderMarkdown=markdown=>{// Basic markdown rendering - convert common markdown elements to HTML\nlet html=markdown// Headers\n.replace(/^### (.*$)/gm,'<h3>$1</h3>').replace(/^## (.*$)/gm,'<h2>$1</h2>').replace(/^# (.*$)/gm,'<h1>$1</h1>')// Bold and italic\n.replace(/\\*\\*(.*?)\\*\\*/g,'<strong>$1</strong>').replace(/\\*(.*?)\\*/g,'<em>$1</em>')// Code blocks\n.replace(/```([\\s\\S]*?)```/g,'<pre><code>$1</code></pre>').replace(/`([^`]+)`/g,'<code>$1</code>')// Links\n.replace(/\\[([^\\]]+)\\]\\(([^)]+)\\)/g,'<a href=\"$2\" target=\"_blank\" rel=\"noopener noreferrer\">$1</a>')// Line breaks\n.replace(/\\n\\n/g,'</p><p>').replace(/\\n/g,'<br/>');// Wrap in paragraphs\nhtml='<p>'+html+'</p>';// Clean up empty paragraphs\nhtml=html.replace(/<p><\\/p>/g,'');html=html.replace(/<p><br\\/><\\/p>/g,'');return html;};if(!file)return null;return/*#__PURE__*/_jsx(\"div\",{className:\"markdown-viewer-overlay\",onClick:onClose,children:/*#__PURE__*/_jsxs(\"div\",{className:\"markdown-viewer\",onClick:e=>e.stopPropagation(),children:[/*#__PURE__*/_jsxs(\"div\",{className:\"markdown-viewer-header\",children:[/*#__PURE__*/_jsx(\"h3\",{children:file.title}),/*#__PURE__*/_jsx(\"button\",{className:\"close-btn\",onClick:onClose,children:\"\\xD7\"})]}),/*#__PURE__*/_jsxs(\"div\",{className:\"markdown-viewer-content\",children:[loading&&/*#__PURE__*/_jsx(\"div\",{className:\"loading\",children:\"Loading...\"}),error&&/*#__PURE__*/_jsxs(\"div\",{className:\"error\",children:[\"Error: \",error]}),!loading&&!error&&/*#__PURE__*/_jsx(\"div\",{className:\"markdown-content\",dangerouslySetInnerHTML:{__html:renderMarkdown(content)}})]})]})});}export default MarkdownViewer;","map":{"version":3,"names":["React","useState","useEffect","jsx","_jsx","jsxs","_jsxs","MarkdownViewer","_ref","file","onClose","content","setContent","loading","setLoading","error","setError","fetchMarkdownContent","path","filePath","response","fetch","ok","Error","concat","text","err","message","renderMarkdown","markdown","html","replace","className","onClick","children","e","stopPropagation","title","dangerouslySetInnerHTML","__html"],"sources":["/Users/pavankalam/Desktop/gemini_cli_portfolio/portfolio-website/src/components/MarkdownViewer.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\n\nfunction MarkdownViewer({ file, onClose }) {\n  const [content, setContent] = useState('');\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n\n  useEffect(() => {\n    if (file) {\n      fetchMarkdownContent(file.path);\n    }\n  }, [file]);\n\n  const fetchMarkdownContent = async (filePath) => {\n    try {\n      setLoading(true);\n      setError(null);\n      const response = await fetch(filePath);\n      if (!response.ok) {\n        throw new Error(`Failed to fetch ${filePath}`);\n      }\n      const text = await response.text();\n      setContent(text);\n    } catch (err) {\n      setError(err.message);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const renderMarkdown = (markdown) => {\n    // Basic markdown rendering - convert common markdown elements to HTML\n    let html = markdown\n      // Headers\n      .replace(/^### (.*$)/gm, '<h3>$1</h3>')\n      .replace(/^## (.*$)/gm, '<h2>$1</h2>')\n      .replace(/^# (.*$)/gm, '<h1>$1</h1>')\n      // Bold and italic\n      .replace(/\\*\\*(.*?)\\*\\*/g, '<strong>$1</strong>')\n      .replace(/\\*(.*?)\\*/g, '<em>$1</em>')\n      // Code blocks\n      .replace(/```([\\s\\S]*?)```/g, '<pre><code>$1</code></pre>')\n      .replace(/`([^`]+)`/g, '<code>$1</code>')\n      // Links\n      .replace(/\\[([^\\]]+)\\]\\(([^)]+)\\)/g, '<a href=\"$2\" target=\"_blank\" rel=\"noopener noreferrer\">$1</a>')\n      // Line breaks\n      .replace(/\\n\\n/g, '</p><p>')\n      .replace(/\\n/g, '<br/>');\n\n    // Wrap in paragraphs\n    html = '<p>' + html + '</p>';\n    \n    // Clean up empty paragraphs\n    html = html.replace(/<p><\\/p>/g, '');\n    html = html.replace(/<p><br\\/><\\/p>/g, '');\n\n    return html;\n  };\n\n  if (!file) return null;\n\n  return (\n    <div className=\"markdown-viewer-overlay\" onClick={onClose}>\n      <div className=\"markdown-viewer\" onClick={(e) => e.stopPropagation()}>\n        <div className=\"markdown-viewer-header\">\n          <h3>{file.title}</h3>\n          <button className=\"close-btn\" onClick={onClose}>Ã—</button>\n        </div>\n        <div className=\"markdown-viewer-content\">\n          {loading && <div className=\"loading\">Loading...</div>}\n          {error && <div className=\"error\">Error: {error}</div>}\n          {!loading && !error && (\n            <div \n              className=\"markdown-content\"\n              dangerouslySetInnerHTML={{ __html: renderMarkdown(content) }}\n            />\n          )}\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default MarkdownViewer; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}